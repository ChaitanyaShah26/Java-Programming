/*
	Write a multithreaded program that generates the Fibonacci sequence.
	This program should work as follows: create a class Input that reads the number of Fibonacci numbers that the program is to generate. 
	The class will then create a separate thread that will generate the Fibonacci numbers, placing the sequence in an array. 
	When the thread finishes execution, the parent thread (Input class) will output the sequence generated by the child thread. 
	Because the parent thread cannot begin outputting the Fibonacci sequence until the child thread finishes, 
	the parent thread will have to wait for the child thread to finish.
*/

import java.util.*;

class Fibonacci extends Thread 
{
	int n,n1=0,n2=1,n3,f[];

	Fibonacci(int num)
	{
		n=num;
	}
	public void run()
	{
		synchronized(this)
		{
			f=new int[n];
			f[0]=n1;
			f[1]=n2;
			for(int i=2;i<n;i++)
			{
				try
				{
					n3=n1+n2;
					f[i]=n3;
					n1=n2;
					n2=n3;
					Thread.sleep(1000);
				}
				catch(Exception e)
				{
					System.out.println(e);
				}
			}
			notify();
		}
	}
	public void print(int m)
	{
		System.out.println("Fibonacci Series : ");
		for(int i=0;i<m;i++)
		{
			System.out.print(f[i]+"\t");
		}
		System.out.println();
	}
}

class Expt13_d
{
	public static void main(String args[])
	{
		Scanner sc=new Scanner(System.in);

		int num;
		System.out.println("Enter number of elements to be printed in Fibonacci Series : ");
		num=sc.nextInt();
		
		Fibonacci fibo=new Fibonacci(num);	
		fibo.start();

		synchronized(fibo)
		{
			try
			{
				fibo.wait();
			}
			catch(Exception e)
			{
				e.printStackTrace();
			}
		}
		fibo.print(num);
	}
}